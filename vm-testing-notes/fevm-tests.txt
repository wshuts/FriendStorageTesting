FriendEditViewModelTests:
  Setup: Create FEVM; 3 dependencies; 3 mock objects passed in to constructor; DP, EA, MDS; additionally, 2 events are mocked;
  Facts: (19) See below

[ShouldLoadFriend]:
  Action: FEVM.Load(friendId)
  Assert/Verify: Friend property not null; Friend has correct Id; Verify one call to DP.GetFriendById(friendId);

  Commentary: straightforward spec for Load method; make data provider call; set Friend property correctly;

  Distinction: Load is actually adapting types from Friend to FriendWrapper;

[ShouldRaisePropertyChangedEventForFriend]:
  Action: FEVM.Load(friendId)
  Assert/Verify: fired is true;

  Commentary: "fired" used interchangeably with "raised"; NPC extension method used to test this event firing; assumes Load changes the Friend property;

[ShouldDisableSaveCommandWhenFriendIsLoaded]:
  Action: FEVM.Load(friendId)
  Assert/Verify: FEVM.SaveCommand.CanExecute is false;

  Commentary: Load uses ICommand functionality for SaveCommand of FEVM; SaveCommand event handlers are initialized in FEVM.

[ShouldEnableSaveCommandWhenFriendIsChanged]:
  Action: FEVM.Friend.FirstName = "Changed";
  Assert/Verify: FEVM.SaveCommand.CanExecute is true;

  Commentary: In test setup is FEVM.Load(friendId);

[ShouldDisableSaveCommandWithoutLoad]:
  Action: None.
  Assert/Verify: FEVM.SaveCommand.CanExecute is false;

  Commentary: No action; test checks state after creation/initialization of FEVM;

[ShouldRaiseCanExecuteChangedForSaveCommandWhenFriendIsChanged]:
  Action: FEVM.Friend.FirstName = "Changed";
  Assert/Verify: fired = true;

  Commentary: test setup: FEVM.Load(friendId); fired initialized to false; subscribed to event; handler sets fired = true (if invoked); Possibility to extend ICommand to support test verification - similar to NPC extension

[ShouldRaiseCanExecuteChangedForSaveCommandAfterLoad]:
  Action: FEVM.Load(friendId)
  Assert/Verify: fired = true;

  Commentary: now using ICommand extension method IsCanExecuteChangedFired

[ShouldRaiseCanExecuteChangedForDeleteCommandAfterLoad]:
  Action: FEVM.Load(friendId)
  Assert/Verify: fired = true;

  Commentary: same test as above; for different command: DeleteCommand

[ShouldRaiseCanExecuteChangedForDeleteCommandWhenAcceptingChanges]:
  Action: FEVM.Friend.AcceptChanges()
  Assert/Verify: fired = true;

  Commentary: strange design; Friend.AcceptChanges() is the trigger; FEVM should raise the correct event; side bar: strange implementation by using FriendPropertyChanged handler;

[ShouldCallSaveMethodOfDataProviderWhenSaveCommandIsExecuted]:
  Action: FEVM.SaveCommand.Execute(null);
  Assert/Verify: DPM.Verify(dp => dp.SaveFriend(FEVM.Friend.Model), Times.Once);

  Commentary: test uses verify to specify collaborator method call;

[Fact]:
  Action: 
  Assert/Verify: 

  Commentary:

[Fact]:
  Action: 
  Assert/Verify: 

  Commentary:

[Fact]:
  Action: 
  Assert/Verify: 

  Commentary:

[Fact]:
  Action: 
  Assert/Verify: 

  Commentary:

[Fact]:
  Action: 
  Assert/Verify: 

  Commentary:

[Fact]:
  Action: 
  Assert/Verify: 

  Commentary:

[Fact]:
  Action: 
  Assert/Verify: 

  Commentary:

[Fact]:
  Action: 
  Assert/Verify: 

  Commentary:

[Fact]:
  Action: 
  Assert/Verify: 

  Commentary: